when "00000000" => -- 00        | NOP           | No Operation
when "00000001" => -- 01word    | LXI   B,word  | BC <- word
when "00000010" => -- 02        | STAX  B       | (BC) <- A
when "00000011" => -- 03        | INX   B       | BC <- BC + 1
when "00000100" => -- 04        | INR   B       | B <- B + 1
when "00000101" => -- 05        | DCR   B       | B <- B - 1
when "00000110" => -- 06byte    | MVI   B,byte  | B <- byte
when "00000111" => -- 07        | RLC           | ---
when "00001000" => -- 08        | ************  | UNDEFINED
when "00001001" => -- 09        | DAD   B       | HL <- HL + BC
when "00001010" => -- 0A        | LDAX  B       | A <- (BC)
when "00001011" => -- 0B        | DCX   B       | BC <- BC - 1
when "00001100" => -- 0C        | INR   C       | C <- C + 1
when "00001101" => -- 0D        | DCR   C       | C <- C - 1
when "00001110" => -- 0Ebyte    | MVI   C,byte  | C <- byte
when "00001111" => -- 0F        | RRC           | ---
when "00010000" => -- 10        | ************  | UNDEFINED
when "00010001" => -- 11word    | LXI   D,word  | DE <- word
when "00010010" => -- 12        | STAX  D       | (DE) <- A
when "00010011" => -- 13        | INX   D       | DE <- DE + 1
when "00010100" => -- 14        | INR   D       | D <- D + 1
when "00010101" => -- 15        | DCR   D       | D <- D - 1
when "00010110" => -- 16byte    | MVI   D,byte  | D <- byte
when "00010111" => -- 17        | RAL           | ---
when "00011000" => -- 18        | ************  | UNDEFINED
when "00011001" => -- 19        | DAD   D       | HL <- HL + DE
when "00011010" => -- 1A        | LDAX  D       | A <- (DE)
when "00011011" => -- 1B        | DCX   D       | DE <- DE - 1
when "00011100" => -- 1C        | INR   E       | E <- E + 1
when "00011101" => -- 1D        | DCR   E       | E <- E - 1
when "00011110" => -- 1Ebyte    | MVI   E,byte  | E <- byte
when "00011111" => -- 1F        | RAR           | ---
when "00100000" => -- 20        | ************  | UNDEFINED
when "00100001" => -- 21word    | LXI   H,word  | HL <- word
when "00100010" => -- 22word    | SHLD  word    | (word) <- HL
when "00100011" => -- 23        | INX   H       | HL <- HL + 1
when "00100100" => -- 24        | INR   H       | H <- H + 1
when "00100101" => -- 25        | DCR   H       | H <- H - 1
when "00100110" => -- 26byte    | MVI   H,byte  | H <- byte
when "00100111" => -- 27        | DAA           | ---
when "00101000" => -- 28        | ************  | UNDEFINED
when "00101001" => -- 29        | DAD   H       | HL <- HL + HL
when "00101010" => -- 2Aword    | LHLD  word    | HL <- (word)
when "00101011" => -- 2B        | DCX   H       | HL <- HL - 1
when "00101100" => -- 2C        | INR   L       | L <- L + 1
when "00101101" => -- 2D        | DCR   L       | L <- L - 1
when "00101110" => -- 2Ebyte    | MVI   L,byte  | L <- byte
when "00101111" => -- 2F        | CMA           | A <- NOT A
when "00110000" => -- 30        | ************  | UNDEFINED
when "00110001" => -- 31word    | LXI   SP,word | SP <- word
when "00110010" => -- 32word    | STA   word    | (word) <- A
when "00110011" => -- 33        | INX   SP      | SP <- SP + 1
when "00110100" => -- 34        | INR   M       | (HL) <- (HL) + 1
when "00110101" => -- 35        | DCR   M       | (HL) <- (HL) - 1
when "00110110" => -- 36byte    | MVI   M,byte  | (HL) <- byte
when "00110111" => -- 37        | STC           | CF (Carry Flag) <- 1
when "00111000" => -- 38        | ************  | UNDEFINED
when "00111001" => -- 39        | DAD   SP      | HL <- HL + SP
when "00111010" => -- 3Aword    | LDA   word    | A <- (word)
when "00111011" => -- 3B        | DCX   SP      | SP <- SP - 1
when "00111100" => -- 3C        | INR   A       | A <- A + 1
when "00111101" => -- 3D        | DCR   A       | A <- A - 1
when "00111110" => -- 3Ebyte    | MVI   A,byte  | A <- byte
when "00111111" => -- 3F        | CMC           | CF (Carry Flag) <- NOT CF
when "01000000" => -- 40        | MOV   B,B     | B <- B
when "01000001" => -- 41        | MOV   B,C     | B <- C
when "01000010" => -- 42        | MOV   B,D     | B <- D
when "01000011" => -- 43        | MOV   B,E     | B <- E
when "01000100" => -- 44        | MOV   B,H     | B <- H
when "01000101" => -- 45        | MOV   B,L     | B <- L
when "01000110" => -- 46        | MOV   B,M     | B <- (HL)
when "01000111" => -- 47        | MOV   B,A     | B <- A
when "01001000" => -- 48        | MOV   C,B     | C <- B
when "01001001" => -- 49        | MOV   C,C     | C <- C
when "01001010" => -- 4A        | MOV   C,D     | C <- D
when "01001011" => -- 4B        | MOV   C,E     | C <- E
when "01001100" => -- 4C        | MOV   C,H     | C <- H
when "01001101" => -- 4D        | MOV   C,L     | C <- L
when "01001110" => -- 4E        | MOV   C,M     | C <- (HL)
when "01001111" => -- 4F        | MOV   C,A     | C <- A
when "01010000" => -- 50        | MOV   D,B     | D <- B
when "01010001" => -- 51        | MOV   D,C     | D <- C
when "01010010" => -- 52        | MOV   D,D     | D <- D
when "01010011" => -- 53        | MOV   D,E     | D <- E
when "01010100" => -- 54        | MOV   D,H     | D <- H
when "01010101" => -- 55        | MOV   D,L     | D <- L
when "01010110" => -- 56        | MOV   D,M     | D <- (HL)
when "01010111" => -- 57        | MOV   D,A     | D <- A
when "01011000" => -- 58        | MOV   E,B     | E <- B
when "01011001" => -- 59        | MOV   E,C     | E <- C
when "01011010" => -- 5A        | MOV   E,D     | E <- D
when "01011011" => -- 5B        | MOV   E,E     | E <- E
when "01011100" => -- 5C        | MOV   E,H     | E <- H
when "01011101" => -- 5D        | MOV   E,L     | E <- L
when "01011110" => -- 5E        | MOV   E,M     | E <- (HL)
when "01011111" => -- 5F        | MOV   E,A     | E <- A
when "01100000" => -- 60        | MOV   H,B     | H <- B
when "01100001" => -- 61        | MOV   H,C     | H <- C
when "01100010" => -- 62        | MOV   H,D     | H <- D
when "01100011" => -- 63        | MOV   H,E     | H <- E
when "01100100" => -- 64        | MOV   H,H     | H <- H
when "01100101" => -- 65        | MOV   H,L     | H <- L
when "01100110" => -- 66        | MOV   H,M     | H <- (HL)
when "01100111" => -- 67        | MOV   H,A     | H <- A
when "01101000" => -- 68        | MOV   L,B     | L <- B
when "01101001" => -- 69        | MOV   L,C     | L <- C
when "01101010" => -- 6A        | MOV   L,D     | L <- D
when "01101011" => -- 6B        | MOV   L,E     | L <- E
when "01101100" => -- 6C        | MOV   L,H     | L <- H
when "01101101" => -- 6D        | MOV   L,L     | L <- L
when "01101110" => -- 6E        | MOV   L,M     | L <- (HL)
when "01101111" => -- 6F        | MOV   L,A     | L <- A
when "01110000" => -- 70        | MOV   M,B     | (HL) <- B
when "01110001" => -- 71        | MOV   M,C     | (HL) <- C
when "01110010" => -- 72        | MOV   M,D     | (HL) <- D
when "01110011" => -- 73        | MOV   M,E     | (HL) <- E
when "01110100" => -- 74        | MOV   M,H     | (HL) <- H
when "01110101" => -- 75        | MOV   M,L     | (HL) <- L
when "01110110" => -- 76        | HLT           | NOP;PC <- PC-1
when "01110111" => -- 77        | MOV   M,A     | (HL) <- A
when "01111000" => -- 78        | MOV   A,B     | A <- B
when "01111001" => -- 79        | MOV   A,C     | A <- C
when "01111010" => -- 7A        | MOV   A,D     | A <- D
when "01111011" => -- 7B        | MOV   A,E     | A <- E
when "01111100" => -- 7C        | MOV   A,H     | A <- H
when "01111101" => -- 7D        | MOV   A,L     | A <- L
when "01111110" => -- 7E        | MOV   A,M     | A <- (HL)
when "01111111" => -- 7F        | MOV   A,A     | A <- A
when "10000000" => -- 80        | ADD   B       | A <- A + B
when "10000001" => -- 81        | ADD   C       | A <- A + C
when "10000010" => -- 82        | ADD   D       | A <- A + D
when "10000011" => -- 83        | ADD   E       | A <- A + E
when "10000100" => -- 84        | ADD   H       | A <- A + H
when "10000101" => -- 85        | ADD   L       | A <- A + L
when "10000110" => -- 86        | ADD   M       | A <- A + (HL)
when "10000111" => -- 87        | ADD   A       | A <- A + A
when "10001000" => -- 88        | ADC   B       | A <- A + B + Carry
when "10001001" => -- 89        | ADC   C       | A <- A + C + Carry
when "10001010" => -- 8A        | ADC   D       | A <- A + D + Carry
when "10001011" => -- 8B        | ADC   E       | A <- A + E + Carry
when "10001100" => -- 8C        | ADC   H       | A <- A + H + Carry
when "10001101" => -- 8D        | ADC   L       | A <- A + L + Carry
when "10001110" => -- 8E        | ADC   M       | A <- A + (HL) + Carry
when "10001111" => -- 8F        | ADC   A       | A <- A + A + Carry
when "10010000" => -- 90        | SUB   B       | A <- A - B
when "10010001" => -- 91        | SUB   C       | A <- A - C
when "10010010" => -- 92        | SUB   D       | A <- A - D
when "10010011" => -- 93        | SUB   E       | A <- A - E
when "10010100" => -- 94        | SUB   H       | A <- A - H
when "10010101" => -- 95        | SUB   L       | A <- A - L
when "10010110" => -- 96        | SUB   M       | A <- A - (HL)
when "10010111" => -- 97        | SUB   A       | A <- A - A
when "10011000" => -- 98        | SBB   B       | A <- A - B - Carry
when "10011001" => -- 99        | SBB   C       | A <- A - C - Carry
when "10011010" => -- 9A        | SBB   D       | A <- A - D - Carry
when "10011011" => -- 9B        | SBB   E       | A <- A - E - Carry
when "10011100" => -- 9C        | SBB   H       | A <- A - H - Carry
when "10011101" => -- 9D        | SBB   L       | A <- A - L - Carry
when "10011110" => -- 9E        | SBB   M       | A <- A - (HL) - Carry
when "10011111" => -- 9F        | SBB   A       | A <- A - A - Carry
when "10100000" => -- A0        | ANA   B       | A <- A AND B
when "10100001" => -- A1        | ANA   C       | A <- A AND C
when "10100010" => -- A2        | ANA   D       | A <- A AND D
when "10100011" => -- A3        | ANA   E       | A <- A AND E
when "10100100" => -- A4        | ANA   H       | A <- A AND H
when "10100101" => -- A5        | ANA   L       | A <- A AND L
when "10100110" => -- A6        | ANA   M       | A <- A AND (HL)
when "10100111" => -- A7        | ANA   A       | A <- A AND A
when "10101000" => -- A8        | XRA   B       | A <- A XOR B
when "10101001" => -- A9        | XRA   C       | A <- A XOR C
when "10101010" => -- AA        | XRA   D       | A <- A XOR D
when "10101011" => -- AB        | XRA   E       | A <- A XOR E
when "10101100" => -- AC        | XRA   H       | A <- A XOR H
when "10101101" => -- AD        | XRA   L       | A <- A XOR L
when "10101110" => -- AE        | XRA   M       | A <- A XOR (HL)
when "10101111" => -- AF        | XRA   A       | A <- A XOR A
when "10110000" => -- B0        | ORA   B       | A <- A OR B
when "10110001" => -- B1        | ORA   C       | A <- A OR C
when "10110010" => -- B2        | ORA   D       | A <- A OR D
when "10110011" => -- B3        | ORA   E       | A <- A OR E
when "10110100" => -- B4        | ORA   H       | A <- A OR H
when "10110101" => -- B5        | ORA   L       | A <- A OR L
when "10110110" => -- B6        | ORA   M       | A <- A OR (HL)
when "10110111" => -- B7        | ORA   A       | A <- A OR A
when "10111000" => -- B8        | CMP   B       | A - B
when "10111001" => -- B9        | CMP   C       | A - C
when "10111010" => -- BA        | CMP   D       | A - D
when "10111011" => -- BB        | CMP   E       | A - E
when "10111100" => -- BC        | CMP   H       | A - H
when "10111101" => -- BD        | CMP   L       | A - L
when "10111110" => -- BE        | CMP   M       | A - (HL)
when "10111111" => -- BF        | CMP   A       | A - A
when "11000000" => -- C0        | RNZ           | If NZ, RET
when "11000001" => -- C1        | POP   B       | B <- (SP+1); C <- (SP); SP <- SP + 2
when "11000010" => -- C2address | JNZ   address | If NZ, PC <- address
when "11000011" => -- C3address | JMP   address | PC <- address
when "11000100" => -- C4address | CNZ   address | If NZ, CALL address
when "11000101" => -- C5        | PUSH  B       | (SP-2) <- C; (SP-1) <- B; SP <- SP - 2
when "11000110" => -- C6byte    | ADI   byte    | A <- A + byte
when "11000111" => -- C7        | RST   0       | CALL 0
when "11001000" => -- C8        | RZ            | If Z, RET
when "11001001" => -- C9        | RET           | PCl <- (SP);PCh <- (SP+1); SP <- (SP+2)
when "11001010" => -- CAaddress | JZ    address | If Z, PC <- address
when "11001011" => -- cb        | ************  | UNDEFINED
when "11001100" => -- CCaddress | CZ    address | If Z, CALL address
when "11001101" => -- CDaddress | CALL  address | <- PCl; SP <- SP - 2;PC <- address
when "11001110" => -- CEbyte    | ACI   byte    | A <- A + byte + Carry
when "11001111" => -- CF        | RST   1       | CALL 8
when "11010000" => -- D0        | RNC           | If NC, RET
when "11010001" => -- D1        | POP   D       | D <- (SP+1); E <- (SP); SP <- SP + 2
when "11010010" => -- D2address | JNC   address | If NC, PC <- address
when "11010011" => -- d3        | ************  | UNDEFINED
when "11010100" => -- D4address | CNC   address | If NC, CALL address
when "11010101" => -- D5        | PUSH  D       | (SP-2) <- E; (SP-1) <- D; SP <- SP - 2
when "11010110" => -- D6byte    | SUI   byte    | A <- A - byte
when "11010111" => -- D7        | RST   2       | CALL 10H
when "11011000" => -- D8        | RC            | If C, RET
when "11011001" => -- d9        | ************  | UNDEFINED
when "11011010" => -- DAaddress | JC    address | If C, PC <- address
when "11011011" => -- db        | ************  | UNDEFINED
when "11011100" => -- DCaddress | CC    address | If C, CALL address
when "11011101" => -- dd        | ************  | UNDEFINED
when "11011110" => -- DEbyte    | SBI   byte    | A <- A - byte - Carry
when "11011111" => -- DF        | RST   3       | CALL 18H
when "11100000" => -- E0        | RPO           | If PO, RET
when "11100001" => -- E1        | POP   H       | H <- (SP+1); L <- (SP); SP <- SP + 2
when "11100010" => -- E2address | JPO   address | If PO, PC <- address
when "11100011" => -- E3        | XTHL          | H <-> (SP+1); L <-> (SP)
when "11100100" => -- E4address | CPO   address | If PO, CALL address
when "11100101" => -- E5        | PUSH  H       | (SP-2) <- L; (SP-1) <- H; SP <- SP - 2 (SP-2) <- Flags;
when "11100110" => -- E6byte    | ANI   byte    | A <- A AND byte
when "11100111" => -- E7        | RST   4       | CALL 20H
when "11101000" => -- E8        | RPE           | If PE, RET
when "11101001" => -- E9        | PCHL          | PC <- HL
when "11101010" => -- EAaddress | JPE   address | If PE, PC <- address
when "11101011" => -- EB        | XCHG          | HL <-> DE
when "11101100" => -- ECaddress | CPE   address | If PE, CALL address
when "11101101" => -- ed        | ************  | UNDEFINED
when "11101110" => -- EEbyte    | XRI   byte    | A <- A XOR byte
when "11101111" => -- EF        | RST   5       | CALL 28H
when "11110000" => -- F0        | RP            | If P, RET
when "11110001" => -- F1        | POP   PSW     | A <- (SP+1); Flags <- (SP); SP <- SP + 2
when "11110010" => -- F2address | JP    address | If P, PC <- address
when "11110011" => -- F3        | DI            | IFF <- 0
when "11110100" => -- F4address | CP    address | If P, CALL address
when "11110101" => -- F5        | PUSH  PSW     | (SP-1) <- A; SP <- SP - 2
when "11110110" => -- F6byte    | ORI   byte    | A <- A OR byte
when "11110111" => -- F7        | RST   6       | CALL 30H
when "11111000" => -- F8        | RM            | If M, RET
when "11111001" => -- F9        | SPHL          | SP <- HL
when "11111010" => -- FAaddress | JM    address | If M, PC <- address
when "11111011" => -- FB        | EI            | IFF <- 1
when "11111100" => -- FCaddress | CM    address | If M, CALL address
when "11111101" => -- fd        | ************  | UNDEFINED
when "11111110" => -- FEbyte    | CPI   byte    | A - byte
when "11111111" => -- FF        | RST   7       | CALL 38H
